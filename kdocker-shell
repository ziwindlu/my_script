#!/bin/bash

# 帮助{{{
help(){
		echo "Usage: `basename $0` [container_name/id] [shell_realpath(default:/bin/bash)] "
		echo "Example: `basename $0` container_name /bin/bash"
		exit 0
}
# }}}
# 初始化{{{
init(){
		# 脚本在发生错误时立即退出。
		set -e 
		#使用未定义的变量时退出。
		set -u 
		# 确保管道中任何命令失败都会导致脚本退出。
		set -o pipefail
		check_os_suport
		check_depen
		if [ ! -f "$LOG_FILE" ];then
				touch "$LOG_FILE"
		fi
}
# }}}
# 参数解析{{{
get_opts(){
		if [ $# -eq 0 ]; then
				help
		fi
		while getopts "ab:c::" opt; do
				case $opt in
						# a)
								# flag_a=true ;;
						# b)
								#     value_b=$OPTARG ;;
						# c)
								#     if is_option $OPTARG; then
								#         value_c="default"
								#         ((OPTIND--))
								#     else
								#         value_c=$OPTARG
								#     fi
								#     ;;
						*)
								echo "Unknown option"
								exit 1
								;;
				esac
				# 获得没有被解析的内容
				shift $((OPTIND - 1))
		done
}

is_option(){
		[[ $OPTARG == -* ]]
}

#}}}
# 检查操作系统是否支持{{{
check_os_suport(){
		source /etc/os-release
		case $ID in
				centos | ubuntu | debian | kali | arch)
						;;
				*)
						echo "Error: $ID is not supported."
						exit 1
		esac
}
# }}}
# 检测依赖软件包{{{
check_depen(){
		for c in ${DEPENS[@]}; do
				if has_cmd $c ; then
						echo "Error: $c is not installed."
						exit 1
				fi 
		done
}
# }}}
# 是否存在某个命令{{{
has_cmd () {
		[ command -v $1 >/dev/null 2>&1 -gt 0 ]
}
# }}}
# 日志{{{
LOG_FILE=$HOME/shell/.$(basename $0).log
log() {
		if [ $# -eq 1 ];then
				local message="$1"
				local level="INFO"
		else
				local level="$1"
				local message="$2"
		fi
		echo "[$(date '+%Y-%m-%d %H:%M:%S')] [$level] $message" | tee -a "$LOG_FILE"
}
# }}}

DEPENS=("docker")
# 检查容器是否在运行
check_container_up(){
		if [ `docker ps | grep $1 | grep -i up | wc -l` -gt 1 ]; then
				return 1
		else
				return 0
		fi
}

# 获取kitten路径
get_kitten_path(){
		kitten_path=`whereis kitten | awk '{print $2}'`
		if [ -z $kitten_path ];then
				log ERROR "kitten is not found"
				exit 1
		fi
		echo $kitten_path
}

# 进入docker shell
docker_shell(){
				log INFO "start shell in container $1"
				docker exec -it $1 $kitten_docker_path run-shell --shell=${2:-/bin/bash}
				log INFO "stop shell in container $1"
}

kitten_docker_path="/bin/kitten"

run(){
		if check_container_up $1; then
				kp=`get_kitten_path`
				# echo $kp
				# 原容器中存在kitten则直接使用
				if [[ `docker exec $1 ls -l $kitten_docker_path | grep kitten | wc -l` -eq 1 ]]; then
						docker_shell $@
				else
						docker cp $kp $1:$kitten_docker_path
						docker exec $1 chmod 755 $kitten_docker_path
						docker_shell $@
				fi
		else
				log ERROR "container $1 is not up"
				exit 1
		fi
		exit 0
}

main(){
		init 
		get_opts $@
		run $@
}

main $@
